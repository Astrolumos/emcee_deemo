import numpy as np

def lnprior_flat(params):
    # Parameters: P0, c500, alpha, beta
    if 0 < params['P0'] < 15 and 0 < params['c500'] < 10 and \
       0 < params['alpha'] < 10 and 0 < params['beta'] < 10 and \
       0 < params['gamma'] < 10 and 0 < params['a_p'] < 10 and \
       params['logM500'] is None:
        return 0
    elif 0 < params['P0'] < 15 and 0 < params['c500'] < 10 and \
        0 < params['alpha'] < 10 and 0 < params['beta'] < 10 and \
        0 < params['gamma'] < 10 and 0 < params['a_p'] < 10 and \
        8 < params['logM500'] < 16:
        return 0
    else:
        return -np.inf


def lnlikelihood(fitparams_value, data_r_upp, data_y, data_cov, M500, R500, Z, DA_Mpc, angle_in, angle_out, fwhm, fit_params_name):
    cosmology=astropy.cosmology.Planck15
    modelparams = {'alpha': 1.33,
                   'beta': 4.13,
                   'c500': 1.81,
                   'gamma': 0.31,
                   'a_p': 0.12,
                   'P0': 6.41,
                   'logM500': None}
    i = 0
    for key in fit_params_name:
        modelparams[key] = fitparams_value[i]
        i+=1

#    modelparams[fit_params_name] = fitparams_value

    prior = lnprior_flat(modelparams)
    if prior == -np.inf:
        return -np.inf
    if modelparams['logM500'] == None:
        model = upp_profile_all(data_r_upp, M500, R500, Z, DA_Mpc, angle_in, angle_out, fwhm, modelparams)
    else:
        rho_crit = cosmology.critical_density(Z)
        rho_crit = rho_crit.to(units.Msun/units.Mpc**3).value
        M500_model = 10 ** modelparams['logM500']
        R500 = (3. * M500_model / 4. / 500. / np.pi / rho_crit) ** (1./3.)
        model = upp_profile_all(data_r_upp, M500_model, R500, Z, DA_Mpc, angle_in, angle_out, fwhm, modelparams)
    inv_data_cov = np.linalg.inv(data_cov)
    chi2 = np.dot(np.dot((data_y - model).T, inv_data_cov), (data_y - model))
    sys.stdout.write(str(chi2))
    sys.stdout.write('\n')
    sys.stdout.flush()
    return -chi2 * 0.5
